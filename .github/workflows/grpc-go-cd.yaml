name: gRPC Go - CD

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Specify the release version (e.g., 0.0.1)'
        required: true
        default: '0.0.2'
        type: string
      target_environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
          - 'development'
          - 'staging'
          - 'production'

env:
  DOCKER_REGISTRY: 'raymondsquared'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      final_release_version: ${{ steps.set_variables.outputs.final_release_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Display inputs
        run: |
          echo "Packaging version ${{ github.event.inputs.release_version }} ..."
          echo "Deploying to environment: ${{ github.event.inputs.target_environment }} ..."
      - name: Set final release version
        id: set_variables
        run: |
          if [ "${{ github.event.inputs.target_environment }}" != "production" ]; then
            VERSION="${{ github.event.inputs.release_version }}-$(date +'%Y%m%d')${{ github.event.inputs.target_environment }}"
          else
            VERSION="${{ github.event.inputs.release_version }}"
          fi
          echo "final_release_version=$VERSION" >> $GITHUB_OUTPUT
      - name: Display variables
        run: |
          echo "Final package version ${{ steps.set_variables.outputs.final_release_version }} ..."

  package:
    needs: prepare
    runs-on: ubuntu-latest
    outputs:
      final_release_version: ${{ needs.prepare.outputs.final_release_version }}
    strategy:
      matrix:
        component: [server, client]
    steps:
      - uses: actions/checkout@v4
      - name: Display inputs
        run: |
          echo "Deploying package version ${{ needs.prepare.outputs.final_release_version }} ..."
          echo "Deploying ${{ matrix.component }} to environment: ${{ github.event.inputs.target_environment }} ..."
      - name: Package into docker image
        run: |
          cd grpc/go && make package-helloworld CONTAINER_IMAGE_VERSION=${{ needs.prepare.outputs.final_release_version }}
      - name: Save Docker image as tar
        run: |
          docker save ${{ env.DOCKER_REGISTRY }}/grpc-helloworld-${{ matrix.component }}:${{ needs.prepare.outputs.final_release_version }} -o grpc-go-${{ matrix.component }}-image.tar
      - name: Upload ${{ matrix.component }} Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: grpc-go-${{ matrix.component }}-image
          path: grpc-go-${{ matrix.component }}-image.tar
          retention-days: 1
          overwrite: true
  publish:
    needs: package
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [server, client]
    steps:
      - uses: actions/checkout@v4
      - name: Display inputs
        run: |
          echo "Publishing package version ${{ needs.package.outputs.final_release_version }} ..."
          echo "Publishing ${{ matrix.component }} to environment: ${{ github.event.inputs.target_environment }} ..."
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: grpc-go-${{ matrix.component }}-image
      - name: Load Docker image from tar
        run: |
          docker load -i grpc-go-${{ matrix.component }}-image.tar
      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Push Docker image
        run: |
          cd grpc/go && make publish-helloworld-${{ matrix.component }} CONTAINER_IMAGE_VERSION=${{ needs.package.outputs.final_release_version }}
