// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: movie_services.proto

package movie

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Getter_GetMovieByRatings_FullMethodName = "/movie.Getter/GetMovieByRatings"
)

// GetterClient is the client API for Getter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetterClient interface {
	GetMovieByRatings(ctx context.Context, in *GetMovieInput, opts ...grpc.CallOption) (*GetMovieOutput, error)
}

type getterClient struct {
	cc grpc.ClientConnInterface
}

func NewGetterClient(cc grpc.ClientConnInterface) GetterClient {
	return &getterClient{cc}
}

func (c *getterClient) GetMovieByRatings(ctx context.Context, in *GetMovieInput, opts ...grpc.CallOption) (*GetMovieOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMovieOutput)
	err := c.cc.Invoke(ctx, Getter_GetMovieByRatings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetterServer is the server API for Getter service.
// All implementations must embed UnimplementedGetterServer
// for forward compatibility.
type GetterServer interface {
	GetMovieByRatings(context.Context, *GetMovieInput) (*GetMovieOutput, error)
	mustEmbedUnimplementedGetterServer()
}

// UnimplementedGetterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGetterServer struct{}

func (UnimplementedGetterServer) GetMovieByRatings(context.Context, *GetMovieInput) (*GetMovieOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovieByRatings not implemented")
}
func (UnimplementedGetterServer) mustEmbedUnimplementedGetterServer() {}
func (UnimplementedGetterServer) testEmbeddedByValue()                {}

// UnsafeGetterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetterServer will
// result in compilation errors.
type UnsafeGetterServer interface {
	mustEmbedUnimplementedGetterServer()
}

func RegisterGetterServer(s grpc.ServiceRegistrar, srv GetterServer) {
	// If the following call pancis, it indicates UnimplementedGetterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Getter_ServiceDesc, srv)
}

func _Getter_GetMovieByRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetterServer).GetMovieByRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Getter_GetMovieByRatings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetterServer).GetMovieByRatings(ctx, req.(*GetMovieInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Getter_ServiceDesc is the grpc.ServiceDesc for Getter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Getter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "movie.Getter",
	HandlerType: (*GetterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMovieByRatings",
			Handler:    _Getter_GetMovieByRatings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie_services.proto",
}

const (
	MovieProtoService_GetMoviesProto_FullMethodName = "/movie.MovieProtoService/GetMoviesProto"
)

// MovieProtoServiceClient is the client API for MovieProtoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieProtoServiceClient interface {
	GetMoviesProto(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MovieProtoResponse, error)
}

type movieProtoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieProtoServiceClient(cc grpc.ClientConnInterface) MovieProtoServiceClient {
	return &movieProtoServiceClient{cc}
}

func (c *movieProtoServiceClient) GetMoviesProto(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MovieProtoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovieProtoResponse)
	err := c.cc.Invoke(ctx, MovieProtoService_GetMoviesProto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieProtoServiceServer is the server API for MovieProtoService service.
// All implementations must embed UnimplementedMovieProtoServiceServer
// for forward compatibility.
type MovieProtoServiceServer interface {
	GetMoviesProto(context.Context, *emptypb.Empty) (*MovieProtoResponse, error)
	mustEmbedUnimplementedMovieProtoServiceServer()
}

// UnimplementedMovieProtoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMovieProtoServiceServer struct{}

func (UnimplementedMovieProtoServiceServer) GetMoviesProto(context.Context, *emptypb.Empty) (*MovieProtoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMoviesProto not implemented")
}
func (UnimplementedMovieProtoServiceServer) mustEmbedUnimplementedMovieProtoServiceServer() {}
func (UnimplementedMovieProtoServiceServer) testEmbeddedByValue()                           {}

// UnsafeMovieProtoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieProtoServiceServer will
// result in compilation errors.
type UnsafeMovieProtoServiceServer interface {
	mustEmbedUnimplementedMovieProtoServiceServer()
}

func RegisterMovieProtoServiceServer(s grpc.ServiceRegistrar, srv MovieProtoServiceServer) {
	// If the following call pancis, it indicates UnimplementedMovieProtoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MovieProtoService_ServiceDesc, srv)
}

func _MovieProtoService_GetMoviesProto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieProtoServiceServer).GetMoviesProto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieProtoService_GetMoviesProto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieProtoServiceServer).GetMoviesProto(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieProtoService_ServiceDesc is the grpc.ServiceDesc for MovieProtoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieProtoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "movie.MovieProtoService",
	HandlerType: (*MovieProtoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMoviesProto",
			Handler:    _MovieProtoService_GetMoviesProto_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie_services.proto",
}
